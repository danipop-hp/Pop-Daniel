import tkinter as tk
from tkinter import ttk
import random
import time

# Define colors for visualization
COMPARE_COLOR = "#FFA07A"  # Orange for comparison
SWAP_COLOR = "#20B2AA"     # Light sea green for swaps
FINAL_COLOR = "#90EE90"    # Light green for sorted elements
DEFAULT_COLOR = "#4682B4"  # Steel blue for unsorted elements

# Sorting algorithms
def bubble_sort(data, draw_data, speed):
    n = len(data)
    for i in range(n):
        for j in range(0, n-i-1):
            draw_data(data, [COMPARE_COLOR if x == j or x == j+1 else DEFAULT_COLOR for x in range(len(data))])
            time.sleep(speed)
            if data[j] > data[j+1]:
                data[j], data[j+1] = data[j+1], data[j]
                draw_data(data, [SWAP_COLOR if x == j or x == j+1 else DEFAULT_COLOR for x in range(len(data))])
                time.sleep(speed)
    draw_data(data, [FINAL_COLOR for x in range(len(data))])

def insertion_sort(data, draw_data, speed):
    for i in range(1, len(data)):
        key = data[i]
        j = i - 1
        while j >= 0 and key < data[j]:
            draw_data(data, [COMPARE_COLOR if x == j or x == j+1 else DEFAULT_COLOR for x in range(len(data))])
            time.sleep(speed)
            data[j + 1] = data[j]
            j -= 1
        data[j + 1] = key
        draw_data(data, [SWAP_COLOR if x == j+1 else DEFAULT_COLOR for x in range(len(data))])
        time.sleep(speed)
    draw_data(data, [FINAL_COLOR for x in range(len(data))])

def selection_sort(data, draw_data, speed):
    for i in range(len(data)):
        min_idx = i
        for j in range(i+1, len(data)):
            draw_data(data, [COMPARE_COLOR if x == j or x == min_idx else DEFAULT_COLOR for x in range(len(data))])
            time.sleep(speed)
            if data[j] < data[min_idx]:
                min_idx = j
        data[i], data[min_idx] = data[min_idx], data[i]
        draw_data(data, [SWAP_COLOR if x == i or x == min_idx else DEFAULT_COLOR for x in range(len(data))])
        time.sleep(speed)
    draw_data(data, [FINAL_COLOR for x in range(len(data))])

def bogo_sort(data, draw_data, speed):
    def is_sorted(data):
        for i in range(len(data) - 1):
            if data[i] > data[i + 1]:
                return False
        return True

    while not is_sorted(data):
        random.shuffle(data)
        draw_data(data, [SWAP_COLOR for _ in range(len(data))])
        time.sleep(speed)
    draw_data(data, [FINAL_COLOR for x in range(len(data))])

# Main application
class SortingVisualizer:
    def __init__(self, root):
        self.root = root
        self.root.title("Sorting Algorithm Visualizer")

        # UI frame
        self.ui_frame = tk.Frame(self.root, width=600, height=200)
        self.ui_frame.grid(row=0, column=0, padx=10, pady=5)

        # Canvas for visualization
        self.canvas = tk.Canvas(self.root, width=800, height=400, bg="white")
        self.canvas.grid(row=1, column=0, padx=10, pady=5)

        # Algorithm selection
        tk.Label(self.ui_frame, text="Algorithm: ").grid(row=0, column=0, padx=5, pady=5)
        self.algo_menu = ttk.Combobox(self.ui_frame, values=["Bubble Sort", "Insertion Sort", "Selection Sort", "Bogo Sort"])
        self.algo_menu.grid(row=0, column=1, padx=5, pady=5)
        self.algo_menu.current(0)

        # Speed slider
        tk.Label(self.ui_frame, text="Speed: ").grid(row=1, column=0, padx=5, pady=5)
        self.speed_scale = tk.Scale(self.ui_frame, from_=0.1, to=2.0, length=200, digits=2, resolution=0.1, orient=tk.HORIZONTAL)
        self.speed_scale.grid(row=1, column=1, padx=5, pady=5)

        # Data size slider
        tk.Label(self.ui_frame, text="Size: ").grid(row=2, column=0, padx=5, pady=5)
        self.size_scale = tk.Scale(self.ui_frame, from_=5, to=100, resolution=1, orient=tk.HORIZONTAL)
        self.size_scale.grid(row=2, column=1, padx=5, pady=5)

        # Buttons
        self.generate_button = tk.Button(self.ui_frame, text="Generate", command=self.generate_data)
        self.generate_button.grid(row=3, column=0, padx=5, pady=5)

        self.start_button = tk.Button(self.ui_frame, text="Start", command=self.start_sorting)
        self.start_button.grid(row=3, column=1, padx=5, pady=5)

        # Data
        self.data = []

    def generate_data(self):
        size = self.size_scale.get()
        self.data = [random.randint(10, 400) for _ in range(size)]
        self.draw_data(self.data, [DEFAULT_COLOR for _ in range(len(self.data))])

    def draw_data(self, data, color_array):
        self.canvas.delete("all")
        canvas_height = 400
        canvas_width = 800
        bar_width = canvas_width / len(data)
        for i, height in enumerate(data):
            x0 = i * bar_width
            y0 = canvas_height - height
            x1 = (i + 1) * bar_width
            y1 = canvas_height
            self.canvas.create_rectangle(x0, y0, x1, y1, fill=color_array[i])
        self.root.update_idletasks()

    def start_sorting(self):
        algo = self.algo_menu.get()
        speed = self.speed_scale.get()
        if algo == "Bubble Sort":
            bubble_sort(self.data, self.draw_data, speed)
        elif algo == "Insertion Sort":
            insertion_sort(self.data, self.draw_data, speed)
        elif algo == "Selection Sort":
            selection_sort(self.data, self.draw_data, speed)
        elif algo == "Bogo Sort":
            bogo_sort(self.data, self.draw_data, speed)

# Run application
if __name__ == "__main__":
    root = tk.Tk()
    app = SortingVisualizer(root)
    root.mainloop()
